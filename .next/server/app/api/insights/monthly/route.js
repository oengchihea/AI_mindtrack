/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/insights/monthly/route";
exports.ids = ["app/api/insights/monthly/route"];
exports.modules = {

/***/ "(rsc)/./app/api/insights/monthly/route.js":
/*!*******************************************!*\
  !*** ./app/api/insights/monthly/route.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\n// Get API key from environment variable or use a fallback for development\nconst API_KEY = process.env.GEMINI_API_KEY || \"AIzaSyAjF5pPXz6SmdQ5QG8IgsIetsmPY1v0VPM\";\nasync function POST(request) {\n    try {\n        const { moodData, journalData, monthStart, monthEnd } = await request.json();\n        if (!moodData && !journalData) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Missing mood or journal data\"\n            }, {\n                status: 400\n            });\n        }\n        // Filter data for the selected month\n        const monthStartDate = new Date(monthStart);\n        const monthEndDate = new Date(monthEnd);\n        const monthlyMoodData = moodData.filter((entry)=>{\n            const entryDate = new Date(entry.timestamp || entry.date);\n            return entryDate >= monthStartDate && entryDate < monthEndDate;\n        });\n        const monthlyJournalData = journalData.filter((entry)=>{\n            const entryDate = new Date(entry.timestamp || entry.date);\n            return entryDate >= monthStartDate && entryDate < monthEndDate;\n        });\n        // Create weekly breakdown for the month\n        const weeklyBreakdown = [];\n        // Get the first Sunday of the month (or the month start if it's a Sunday)\n        let currentWeekStart = new Date(monthStartDate);\n        if (currentWeekStart.getDay() !== 0) {\n            // If not Sunday\n            // Go back to the previous Sunday\n            currentWeekStart.setDate(currentWeekStart.getDate() - currentWeekStart.getDay());\n        }\n        // Generate weekly data until we reach the end of the month\n        while(currentWeekStart < monthEndDate){\n            const weekEnd = new Date(currentWeekStart);\n            weekEnd.setDate(currentWeekStart.getDate() + 7);\n            // Get entries for this week\n            const weekMoods = monthlyMoodData.filter((entry)=>{\n                const entryDate = new Date(entry.timestamp || entry.date);\n                return entryDate >= currentWeekStart && entryDate < weekEnd;\n            });\n            const weekJournals = monthlyJournalData.filter((entry)=>{\n                const entryDate = new Date(entry.timestamp || entry.date);\n                return entryDate >= currentWeekStart && entryDate < weekEnd;\n            });\n            // Calculate average mood for the week\n            const avgMood = weekMoods.length > 0 ? weekMoods.reduce((sum, entry)=>sum + (entry.score || 0), 0) / weekMoods.length : null;\n            weeklyBreakdown.push({\n                weekStart: currentWeekStart.toISOString(),\n                weekEnd: weekEnd.toISOString(),\n                moodEntries: weekMoods.length,\n                journalEntries: weekJournals.length,\n                averageMood: avgMood\n            });\n            // Move to next week\n            currentWeekStart = new Date(weekEnd);\n        }\n        // Calculate overall monthly statistics\n        const monthlyStats = {\n            totalMoodEntries: monthlyMoodData.length,\n            totalJournalEntries: monthlyJournalData.length,\n            averageMood: monthlyMoodData.length > 0 ? monthlyMoodData.reduce((sum, entry)=>sum + (entry.score || 0), 0) / monthlyMoodData.length : null,\n            highestMood: monthlyMoodData.length > 0 ? Math.max(...monthlyMoodData.map((entry)=>entry.score || 0)) : null,\n            lowestMood: monthlyMoodData.length > 0 ? Math.min(...monthlyMoodData.map((entry)=>entry.score || 0)) : null\n        };\n        // Create prompt for Gemini API\n        const prompt = `Analyze the following monthly mood tracking and journal data to identify patterns, trends, and insights.\n                   Focus on longer-term mood fluctuations and recurring themes.\n                   \n                   Month: ${monthStartDate.toLocaleDateString(\"en-US\", {\n            month: \"long\",\n            year: \"numeric\"\n        })}\n                   \n                   Mood Data: ${JSON.stringify(monthlyMoodData)}\n                   Journal Data: ${JSON.stringify(monthlyJournalData)}\n                   Weekly Breakdown: ${JSON.stringify(weeklyBreakdown)}\n                   Monthly Statistics: ${JSON.stringify(monthlyStats)}\n                   \n                   Return the analysis as a JSON object with these properties:\n                   1. summary: A brief summary of the month's mood and journal patterns\n                   2. patterns: Array of identified patterns for this month (at least 2-3 patterns if data permits)\n                   3. insights: Key insights about the user's mood trends this month\n                   4. progressMetrics: Assessment of progress compared to previous periods\n                   5. trajectory: Overall direction of mood and wellbeing\n                   6. peakWeek: The week with the highest average mood\n                   7. lowWeek: The week with the lowest average mood\n                   \n                   If there's not enough data for a particular field, provide a message indicating more data is needed.\n                   DO NOT include any text before or after the JSON.`;\n        // Call the Gemini API\n        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                contents: [\n                    {\n                        parts: [\n                            {\n                                text: prompt\n                            }\n                        ]\n                    }\n                ],\n                generationConfig: {\n                    temperature: 0.2,\n                    maxOutputTokens: 1024\n                }\n            })\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            console.error(\"Gemini API error:\", errorData);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: `Gemini API error: ${JSON.stringify(errorData)}`\n            }, {\n                status: 500\n            });\n        }\n        const data = await response.json();\n        // Extract the text from the Gemini response\n        let text = \"\";\n        if (data.candidates && data.candidates[0] && data.candidates[0].content) {\n            const parts = data.candidates[0].content.parts;\n            if (parts && parts.length > 0) {\n                text = parts[0].text;\n            }\n        }\n        if (!text) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Empty response from Gemini API\"\n            }, {\n                status: 500\n            });\n        }\n        // Parse the response as JSON\n        let analysisResult;\n        try {\n            // Try to extract JSON from the text (in case there's any extra text)\n            const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n            const jsonText = jsonMatch ? jsonMatch[0] : text;\n            analysisResult = JSON.parse(jsonText);\n            // Add the weekly breakdown and monthly stats to the response\n            analysisResult.weeklyBreakdown = weeklyBreakdown;\n            analysisResult.monthlyStats = monthlyStats;\n        } catch (e) {\n            console.error(\"Error parsing Gemini response as JSON:\", e);\n            // If parsing fails, create a basic analysis result\n            analysisResult = {\n                summary: \"We analyzed your mood and journal data for the month.\",\n                patterns: [\n                    \"No clear patterns could be identified with the available data.\"\n                ],\n                insights: \"Continue tracking your mood and journaling to get more detailed insights.\",\n                progressMetrics: \"Not enough data to assess progress.\",\n                trajectory: \"More data needed to determine trajectory.\",\n                weeklyBreakdown: weeklyBreakdown,\n                monthlyStats: monthlyStats\n            };\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            analysis: analysisResult\n        });\n    } catch (error) {\n        console.error(\"Error analyzing monthly data:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to analyze monthly data\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/insights/monthly/route.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Finsights%2Fmonthly%2Froute&page=%2Fapi%2Finsights%2Fmonthly%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finsights%2Fmonthly%2Froute.js&appDir=C%3A%5CAI%20mindtrack%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CAI%20mindtrack&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Finsights%2Fmonthly%2Froute&page=%2Fapi%2Finsights%2Fmonthly%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finsights%2Fmonthly%2Froute.js&appDir=C%3A%5CAI%20mindtrack%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CAI%20mindtrack&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_AI_mindtrack_app_api_insights_monthly_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/insights/monthly/route.js */ \"(rsc)/./app/api/insights/monthly/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/insights/monthly/route\",\n        pathname: \"/api/insights/monthly\",\n        filename: \"route\",\n        bundlePath: \"app/api/insights/monthly/route\"\n    },\n    resolvedPagePath: \"C:\\\\AI mindtrack\\\\app\\\\api\\\\insights\\\\monthly\\\\route.js\",\n    nextConfigOutput,\n    userland: C_AI_mindtrack_app_api_insights_monthly_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZpbnNpZ2h0cyUyRm1vbnRobHklMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmluc2lnaHRzJTJGbW9udGhseSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmluc2lnaHRzJTJGbW9udGhseSUyRnJvdXRlLmpzJmFwcERpcj1DJTNBJTVDQUklMjBtaW5kdHJhY2slNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNBSSUyMG1pbmR0cmFjayZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDcUI7QUFDTztBQUNwRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcQUkgbWluZHRyYWNrXFxcXGFwcFxcXFxhcGlcXFxcaW5zaWdodHNcXFxcbW9udGhseVxcXFxyb3V0ZS5qc1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvaW5zaWdodHMvbW9udGhseS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2luc2lnaHRzL21vbnRobHlcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2luc2lnaHRzL21vbnRobHkvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxBSSBtaW5kdHJhY2tcXFxcYXBwXFxcXGFwaVxcXFxpbnNpZ2h0c1xcXFxtb250aGx5XFxcXHJvdXRlLmpzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Finsights%2Fmonthly%2Froute&page=%2Fapi%2Finsights%2Fmonthly%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finsights%2Fmonthly%2Froute.js&appDir=C%3A%5CAI%20mindtrack%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CAI%20mindtrack&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Finsights%2Fmonthly%2Froute&page=%2Fapi%2Finsights%2Fmonthly%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Finsights%2Fmonthly%2Froute.js&appDir=C%3A%5CAI%20mindtrack%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CAI%20mindtrack&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();